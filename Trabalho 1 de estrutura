Ana Laura Leão Alves
RA: 123684

Questão 1
i = 0:
temp = vetor[0] = 0
vetor[0] = vetor[9-0] = vetor[9] = 9
vetor[9] = temp = 0

i = 1
temp = vetor[1] = 1
vetor[1] = vetor[9-1] = vetor[8] = 8
vetor[8] = temp = 1

i = 2
temp = vetor[2] = 2
vetor[2] = vetor[9-2] = vetor[7] = 7
vetor[7] = temp = 2

i = 3 
temp = vetor[3] = 3
vetor[3] = vetor[9-3] = vetor[6] = 6
vetor[6] = temp = 3

i = 4
temp = vetor[4] = 4
vetor[4] = vetor[9-4] = vetor[5] = 5
vetor[5] = temp = 4

i = 5 
temp = vetor[5] = 5
vetor[5] = vetor[9-5] = vetor[4] = 4
vetor[4] = temp = 5

i = 6
temp = vetor[6] = 6
vetor[6] = vetor[9-6] = vetor[3] = 3
vetor[3] = temp = 6

i = 7
temp = vetor[7] = 7
vetor[7] = vetor[9-7] = vetor[2] = 2
vetor[2] = temp = 7

i = 8
temp = vetor[8] = 8
vetor[8] = vetor[9-8] = vetor[1] = 1
vetor[1] = temp = 8

i = 9
temp = vetor[9] = 9
vetor[9] = vetor[9-9] = vetor[0] = 0
vetor[0] = temp = 9

vetor = {9,8,7,6,5,4,3,2,1,0}

Questão 2 
int verificarOrdenacao(int vetor[], int tamanho) {
  for (int i = 0; i < tamanho - 1; i++) {
        if (vetor[i] > vetor[i + 1]) {
            return 0; 
        }
    }
    return 1; 
}

int main() {
    int N;

    printf("Digite o tamanho do vetor: ");
    scanf("%d", &N);

    if (N <= 0) {
        printf("Tamanho do vetor inválido.\n");
        return 1;
    }

    int vetor[N];

    printf("Digite os elementos do vetor:\n");
    for (int i = 0; i < N; i++) {
        printf("Elemento %d: ", i + 1);
        scanf("%d", &vetor[i]);
    }

    if (verificarOrdenacao(vetor, N)) {
        printf("SIM\n");
    } else {
        printf("NAO\n");
    }

    return 0;
}


Questão 3
char tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO];

void inicializarTabuleiro() {
    for (int i = 0; i < TAMANHO_TABULEIRO; i++) {
        for (int j = 0; j < TAMANHO_TABULEIRO; j++) {
            tabuleiro[i][j] = ' ';
        }
    }
}

void exibirTabuleiro() {
    printf("\n");
    for (int i = 0; i < TAMANHO_TABULEIRO; i++) {
        for (int j = 0; j < TAMANHO_TABULEIRO; j++) {
            printf(" %c ", tabuleiro[i][j]);
            if (j < TAMANHO_TABULEIRO - 1) {
                printf("|");
            }
        }
        printf("\n");
        if (i < TAMANHO_TABULEIRO - 1) {
            printf("---|---|---\n");
        }
    }
    printf("\n");
}

int main() {
    int linha, coluna;
    char jogador = 'X'; 

    inicializarTabuleiro();

    printf("Bem-vindo ao Jogo da Velha!\n\n");

    while (1) {
        exibirTabuleiro();

        printf("Jogador %c, digite a linha (1-3) e a coluna (1-3) para a sua jogada: ", jogador);
        scanf("%d %d", &linha, &coluna);

        if (linha < 1 || linha > 3 || coluna < 1 || coluna > 3 || tabuleiro[linha - 1][coluna - 1] != ' ') {
            printf("Posição inválida. Tente novamente.\n");
            continue;
        }

        tabuleiro[linha - 1][coluna - 1] = jogador;

        if (jogador == 'X') {
            jogador = 'O';
        } else {
            jogador = 'X';
        }
    }

    return 0;
}


Questão 4
#define LINHAS 10
#define COLUNAS 10

int main() {
    int matriz[LINHAS][COLUNAS];
    int maior_valor = matriz[0][0];
    int linha_maior_valor, coluna_maior_valor;

    printf("Digite os elementos da matriz %dx%d:\n", LINHAS, COLUNAS);
    for (int i = 0; i < LINHAS; i++) {
        for (int j = 0; j < COLUNAS; j++) {
            scanf("%d", &matriz[i][j]);

            if (matriz[i][j] > maior_valor) {
                maior_valor = matriz[i][j];
                linha_maior_valor = i;
                coluna_maior_valor = j;
            }
        }
    }

    printf("O maior valor é %d e está localizado na linha %d e coluna %d.\n", maior_valor, linha_maior_valor + 1, coluna_maior_valor + 1);

    return 0;
}


Questão 5
struct BandasMusica {
    char nome[50];
    char tipoMusica[50];
    int numIntegrantes;
    int ranking;
};

int main() {
    struct BandasMusica minhaBanda = {"Linkin Park", "Rock", 5, 1};

    printf("Nome da banda: %s\n", minhaBanda.nome);
    printf("Tipo de música: %s\n", minhaBanda.tipoMusica);
    printf("Número de integrantes: %d\n", minhaBanda.numIntegrantes);
    printf("Posição no ranking: %d\n", minhaBanda.ranking);

    return 0;
}


Questão 6
Uma estrutura de dados adequada para gerenciar a ordem de execução de processos e threads em um sistema operacional seria uma fila de prioridade.
A fila de prioridade é uma estrutura de dados que armazenam elementos com base em suas prioridades atribuídas. Os elementos são organizados de acordo com sua prioridade,
com o elemento de maior prioridade sendo o primeiro a ser retirado da fila. isso permite que processos e threads com maior prioridade sejam executados antes dos que possuem 
prioridade menor, garantindo um gerenciamento eficiente do tempo de CPU e a resposta rápida a eventos de alta prioridade no sistema.


Questão 7
Uma estrutura de dados adequada para implementar a funcionalidade de desfazer/refazer a última ação tomada seria uma pilha.
Uma pilha é uma estrutura de dadosque segue o principio de LIFO (Last In, First Out), onde o último elemento inserido é o primeiro a ser removido.
Isso faz dela uma escolha idealpara desfazer e refazer ações, pois permite que as ultimas ações tomadas sejam facilmente desfeitas,uma a uma, 
na ordem inversa em que foram feitas. Quando uma ação é desfeita, ela é removida da pilha. E quando uma ação é refazida, ela é colocada novamente
na pilha. Assim, a pilha mantém um histórico das ações tomadas, permitindo a reversão e reexecução dessas ações de maneira eficiente e na ordem correta.

Questão 8 
void trocarValores(int *ptr1, int *ptr2) {
    int temp = *ptr1;
    *ptr1 = *ptr2;
    *ptr2 = temp;
}

int main() {
    int a = 10;
    int b = 20;

    printf("Valores antes da troca: a = %d, b = %d\n", a, b);

    trocarValores(&a, &b);

    printf("Valores depois da troca: a = %d, b = %d\n", a, b);

    return 0;
}
